#!/usr/bin/env node
const {docopt} = require("docopt");
const path = require("path");
const {execFile, execFileSync}   = require('child_process');
const K_RELEASE=process.env.K_RELEASE || 'deps/evm-semantics/deps/k/k-distribution/target/release/k'
const usage = `
Usage:
  kyulrun <file>
`
const cmd = docopt(usage, {});

const get = (term, path) => {
  let p = path
    .split(".")
    .map(s => `<${s}>`)
  let o = getKJSONPath(term.args, p)[0]
  return o;
}

const getKJSONPath = (termList, pathComponents) => {
  if (termList == undefined)      return {}
  if (pathComponents.length == 0) return termList
  let pathComponent = pathComponents[0]
  let subTerm = termList.find( term => term.node == "KApply" && term.label == pathComponent ) || []
  return getKJSONPath(subTerm.args, pathComponents.slice(1))
}

const toHex = o => {
  let h = o.toString(16)
  if (h.length == 1) return '0'+h
  else return h
}


const formatMem = o => {
  //mem entries as a list with entries [loc, value]
  let entries;
  if (o.label == '_|->_') {
    entries = [o.args.map(g => Number(g.token))]
  }
  else if (o.label == '.Map') {return false}
  else if (o.label == '_Map_') {
    entries = o.args.map(f => f.args.map(g => Number(g.token)))
  }
  //fill with zeros to a continuous segment which is a multiple of 32
  let start = '00'.repeat(entries[0][0]) + entries.map(s => toHex(s[1])).reduce((a, e) => a + e, [])
  let mem = start.padEnd(start.length + (64 - start.length % 64), '00')
  let prettyMem = '';
  for (let i=0; i<Math.floor(mem.length / 64);i++) {
    let key = (i+1).toString(16)+'0'
    let entry = mem.slice(i*64, i*64+64)
    if (!(entry == '0'.repeat(64))) {
      prettyMem += `    ${key}: ${entry}\n`
    }
  }
  return prettyMem
}

const formatStorage = o => {
  let entries;
  if (o.label == '_|->_') {
    entries = [o.args.map(g => Number(g.token))]
  }
  else if (o.label == '.Map') {return false}
  else if (o.label == '_Map_') {
    entries = o.args.map(f => f.args.map(g => Number(g.token)))
  }
  let prettyStorage = ''
  for (let i=0; i<entries.length; i++) {
    if (!entries[i][1] == 0) {
      prettyStorage += `  ${toHex(entries[i][0]).padStart(64,'0')}: ${toHex(entries[i][1]).padStart(64,'0')}\n`
    }
  }
  return prettyStorage
}
    

let pgmPath = cmd['<file>']
try {
  let krun = execFileSync('./kyul',
                          ['run',
                            pgmPath]
                         )
  let term = JSON.parse(krun.toString()).term
  let formatedMem = formatMem(get(term, 'memory'))
  let formatedStorage = formatStorage(get(term,'storage'))
  console.log('Trace:')
  console.log('Memory dump:')
  if (formatedMem) {console.log(formatedMem)}
  console.log('Storage dump:')
  if (formatedStorage) {console.log(formatedStorage)}
} catch(e) {
  console.log(e.toString())
}

